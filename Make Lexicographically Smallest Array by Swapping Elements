class UnionFind:
    def __init__(self, nums):
        self.parent = {num: num for num in nums}

    def find(self, a):
        if self.parent[a] != a:
            self.parent[a] = self.find(self.parent[a])
        return self.parent[a]

    def union(self, a, b):
        rootA = self.find(a)
        rootB = self.find(b)
        if rootA != rootB:
            self.parent[rootB] = rootA

class Solution:
    def lexicographicallySmallestArray(self, nums, limit):
        sorted_nums = sorted(nums)
        uf = UnionFind(nums)

        for i in range(1, len(sorted_nums)):
            if sorted_nums[i] - sorted_nums[i - 1] <= limit:
                uf.union(sorted_nums[i], sorted_nums[i - 1])

        group_to_queue = defaultdict(deque)
        for num in sorted_nums:
            group_to_queue[uf.find(num)].append(num)

        result = []
        for num in nums:
            group = uf.find(num)
            result.append(group_to_queue[group].popleft())

        return result
